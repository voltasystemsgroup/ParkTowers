/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Crestron Electronics
System Name:
System Number:
Programmer: BD
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Yamaha RX-A3000 Command & FB Processor v1.0"
// #HINT ""
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT False 0	
#DEFINE_CONSTANT HttpSuffix "HTTP/1.1\x0D\x0A\x0D\x0A"
// #CATEGORY "" 
#CATEGORY "28" // Receiver/Processor
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
// ANALOG_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
// STRING_OUTPUT
DIGITAL_INPUT	_SKIP_,_SKIP_,Connect;

STRING_INPUT	CmdIn[100];
BUFFER_INPUT	RS232_From_Dev[600];

DIGITAL_INPUT	_SKIP_,TunerIsFm;
ANALOG_INPUT	TunerDirVal;


DIGITAL_OUTPUT	_SKIP_,_SKIP_,Connected;
DIGITAL_OUTPUT	_SKIP_,_SKIP_,Tuner_Program1_Avail;
DIGITAL_OUTPUT	Tuner_Program2_Avail;
DIGITAL_OUTPUT	Tuner_Program3_Avail;
DIGITAL_OUTPUT	Tuner_Program4_Avail;
DIGITAL_OUTPUT	Tuner_Program5_Avail;
DIGITAL_OUTPUT	Tuner_Program6_Avail;
DIGITAL_OUTPUT	Tuner_Program7_Avail;
DIGITAL_OUTPUT	Tuner_Program8_Avail;

STRING_OUTPUT	_SKIP_,_SKIP_,RxProcessed;
STRING_OUTPUT	RS232_To_Dev;

STRING_OUTPUT	_SKIP_,_SKIP_,Main_Zone_Name;
STRING_OUTPUT	Main_Scene1_Name;
STRING_OUTPUT	Main_Scene2_Name;
STRING_OUTPUT	Main_Scene3_Name;
STRING_OUTPUT	Main_Scene4_Name;
STRING_OUTPUT	Main_Scene5_Name;
STRING_OUTPUT	Main_Scene6_Name;
STRING_OUTPUT	Main_Scene7_Name;
STRING_OUTPUT	Main_Scene8_Name;
STRING_OUTPUT	Main_Scene9_Name;
STRING_OUTPUT	Main_Scene10_Name;
STRING_OUTPUT	Main_Scene11_Name;
STRING_OUTPUT	Main_Scene12_Name;
STRING_OUTPUT	Main_Sleep_Timer_Text;
STRING_OUTPUT	Main_Vol_Text;
STRING_OUTPUT	Main_Curr_Input_Audio_Type;
STRING_OUTPUT	Main_Decoder_Mode;
STRING_OUTPUT	Main_Pure_Direct_Mode;
STRING_OUTPUT	Main_Adaptive_Dynamic_Range_Mode;
STRING_OUTPUT	Main_Lip_Sync_Mode;
STRING_OUTPUT	Main_Straight_Mode_Status;
STRING_OUTPUT	Main_Enhancer_Status;
STRING_OUTPUT	Main_Sound_Prog_Status;
STRING_OUTPUT	Main_Adaptive_DSP_Mode;
STRING_OUTPUT	Main_3D_Cinema_Mode;
STRING_OUTPUT	Main_Ex_Decoder_Mode;
STRING_OUTPUT	Main_2chan_Decoder_Mode;
STRING_OUTPUT	Main_Curr_HDMI_Out_Config;
STRING_OUTPUT	Main_HDMI_Proc_State;
STRING_OUTPUT	Main_HDMI_Aspect;
STRING_OUTPUT	Main_HDMI_Res;


STRING_OUTPUT	_SKIP_,_SKIP_,Zone2_Name;
STRING_OUTPUT	Zone2_Scene1_Name;
STRING_OUTPUT	Zone2_Scene2_Name;
STRING_OUTPUT	Zone2_Scene3_Name;
STRING_OUTPUT	Zone2_Scene4_Name;
STRING_OUTPUT	Zone2_Sleep_Timer_Text;
STRING_OUTPUT	Zone2_Vol_Text;

STRING_OUTPUT	_SKIP_,_SKIP_,Zone3_Name;
STRING_OUTPUT	Zone3_Scene1_Name;
STRING_OUTPUT	Zone3_Scene2_Name;
STRING_OUTPUT	Zone3_Scene3_Name;
STRING_OUTPUT	Zone3_Scene4_Name;
STRING_OUTPUT	Zone3_Sleep_Timer_Text;
STRING_OUTPUT	Zone3_Vol_Text;

STRING_OUTPUT	_SKIP_,_SKIP_,Zone4_Name;
STRING_OUTPUT	Zone4_Scene1_Name;
STRING_OUTPUT	Zone4_Scene2_Name;
STRING_OUTPUT	Zone4_Scene3_Name;
STRING_OUTPUT	Zone4_Scene4_Name;
STRING_OUTPUT	Zone4_Sleep_Timer_Text;



STRING_OUTPUT	_SKIP_,_SKIP_,Tuner_Curr_Station;
STRING_OUTPUT	Tuner_Curr_Program_Number;
STRING_OUTPUT	Tuner_Curr_Program_Type;
STRING_OUTPUT	Tuner_Curr_Song;
STRING_OUTPUT	Tuner_Curr_Artist;
STRING_OUTPUT	Tuner_Curr_Album;



/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT	ClientSocket[500];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER	
// SIGNED_INTEGER_PARAMETER

// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER	ClientSocketAddress[15];
INTEGER_PARAMETER ClientSocketPort;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

#BEGIN_PARAMETER_PROPERTIES ClientSocketPort
	PropValidUnits = unitDecimal;
	propBounds = 50000d,65535d;
	propDefaultValue = 50000d;
	propShortDescription = "Default Communication Port";
#End_Parameter_Properties

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
SIGNED_INTEGER ClientSocketStatus;
STRING CmdToSend[200];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/
 string_function fn_parseDelimitedText(
 string szText,
 string szAnchor,
 string szDelimiter,
 integer bCaseMatch)
{
 integer nPos;
 integer nStart;
 integer nRange;
 string szValue[256];
  
 nPos = 0;
 nStart = 0;
 nRange = 0;
 
 if(bCaseMatch) nPos = find(szAnchor, szText);
 else nPos = findNoCase(szAnchor, szText);
 
 if(nPos > 0)
 {
  nStart = nPos+len(szAnchor);

  if(bCaseMatch) nRange = find(szDelimiter, szText, nStart);
  else nRange = findNoCase(szDelimiter, szText, nStart);
  
  nRange = nRange-nStart;

  szValue = mid(szText, nStart, nRange);
  return(szValue);
 }
 else return("");
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Connect
{
	SocketConnectClient(ClientSocket,ClientSocketAddress,ClientSocketPort,1);	
}

CHANGE CmdIn
{
	CmdToSend = CmdIn;
	
	IF (ClientSocketStatus = 2)
	{
		SocketSend(ClientSocket,CmdToSend);
		CmdToSend = "";
	} 
}

CHANGE TunerDirVal
{
	IF(TunerIsFm = True)
	{
		MAKESTRING(CmdToSend,"@HDRADIO:FMFREQ=%d\n",TunerDirVal);
		
		RS232_To_Dev = CmdToSend;

		IF (ClientSocketStatus = 2)
		{
			SocketSend(ClientSocket,CmdToSend);
			CmdToSend = "";
		}
	}
	ELSE
	{
		MAKESTRING(CmdToSend,"@HDRADIO:AMFREQ=%d\n",TunerDirVal);

		RS232_To_Dev = CmdToSend;

		IF (ClientSocketStatus = 2)
		{
			SocketSend(ClientSocket,CmdToSend);
			CmdToSend = "";
		}      
	}
}



//Socket Handling

SOCKETCONNECT ClientSocket
{	
	//TRACE("Socket Connected");
	Connected = True;
}


SOCKETDISCONNECT ClientSocket
{
	//TRACE("Socket Closed");
	Connected = False;
}


SOCKETSTATUS ClientSocket
{
	ClientSocketStatus = SocketGetStatus();
}

CHANGE RS232_From_Dev
{
	STRING sTemp[255];
	STRING sTrash[10];
	
	INTEGER sPos;
	INTEGER ePos;

	WHILE (FIND("\x0D\x0A",RS232_From_Dev))
	{

		sTemp = fn_parseDelimitedText(RS232_From_Dev,"@","\x0D\x0A",0);

		sTrash = REMOVE("\x0D\x0A",RS232_From_Dev);
		
		RxProcessed = sTemp;

		IF(FIND("MAIN:SLEEP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Sleep_Timer_Text = MID(sTemp,sPos +1,ePos);
			WAIT (1)
			CLEARBUFFER(RS232_From_Dev);
		}

		IF(FIND("MAIN:VOL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Vol_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:AUDSEL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Curr_Input_Audio_Type = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:DECODERSEL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Decoder_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:PUREDIRMODE=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Pure_Direct_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ADAPTIVEDRC=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Adaptive_Dynamic_Range_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:LIPSYNCMODE=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Lip_Sync_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:STRAIGHT=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Straight_Mode_Status = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ENHANCER=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Enhancer_Status = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SOUNDPRG=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Sound_Prog_Status = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ADAPTIVEDSP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Adaptive_DSP_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ADAPTIVEDSP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_3D_Cinema_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:EXSURDECODER=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Ex_Decoder_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:2CHDECODER=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_2chan_Decoder_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:HDMIOUT=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Curr_HDMI_Out_Config = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:HDMIPROCESSING=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_HDMI_Proc_State = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:HDMIASPECT=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_HDMI_Aspect = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:HDMIRESOL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_HDMI_Res = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ZONENAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Zone_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE1NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene1_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE2NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE3NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE4NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene4_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE5NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene5_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE6NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene6_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE7NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene7_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE8NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene8_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE9NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene9_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE10NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene10_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE11NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene11_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE12NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene12_Name = MID(sTemp,sPos +1,ePos);
		}



// ZONE2 FUNCTIONS

		IF(FIND("ZONE2:SLEEP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Sleep_Timer_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:VOL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Vol_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:ZONENAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:SCENE1NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Scene1_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:SCENE2NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Scene2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:SCENE3NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Scene3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:SCENE4NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Scene4_Name = MID(sTemp,sPos +1,ePos);
		}

// ZONE3 FUNCTIONS

		IF(FIND("ZONE3:SLEEP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Sleep_Timer_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:VOL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Vol_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:ZONENAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:SCENE1NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Scene1_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:SCENE2NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Scene2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:SCENE3NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Scene3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:SCENE4NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Scene4_Name = MID(sTemp,sPos +1,ePos);
		}


// ZONE4 FUNCTIONS

		IF(FIND("ZONE4:SLEEP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Sleep_Timer_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:ZONENAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:SCENE1NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Scene1_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:SCENE2NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Scene2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:SCENE3NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Scene3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:SCENE4NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Scene4_Name = MID(sTemp,sPos +1,ePos);
		}

//TUNER STUFF

		IF(FIND("HDRADIO:FMFREQ=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Station = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:PRGNUM=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Program_Number = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:PRGTYPE=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Program_Type = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:SONG=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Song = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:ARTIST=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Artist = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:ALBUM=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Album = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:AVAILPRG1=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program1_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG2=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program2_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG3=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program3_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG4=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program4_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG5=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program5_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG6=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program6_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG7=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program7_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG8=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program8_Avail = True;
		}


 
	}
	
}




SOCKETRECEIVE ClientSocket
{
	STRING sTemp[255];
	STRING sTrash[10];
	
	INTEGER sPos;
	INTEGER ePos;

	WHILE (FIND("\x0D\x0A",clientSocket.SocketRxBuf))
	{

		sTemp = fn_parseDelimitedText(clientSocket.SocketRxBuf,"@","\x0D\x0A",0);

		sTrash = REMOVE("\x0D\x0A",clientSocket.SocketRxBuf);
		
		RxProcessed = sTemp;

		IF(FIND("MAIN:SLEEP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Sleep_Timer_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:VOL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Vol_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:AUDSEL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Curr_Input_Audio_Type = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:DECODERSEL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Decoder_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:PUREDIRMODE=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Pure_Direct_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ADAPTIVEDRC=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Adaptive_Dynamic_Range_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:LIPSYNCMODE=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Lip_Sync_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:STRAIGHT=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Straight_Mode_Status = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ENHANCER=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Enhancer_Status = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SOUNDPRG=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Sound_Prog_Status = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ADAPTIVEDSP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Adaptive_DSP_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ADAPTIVEDSP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_3D_Cinema_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:EXSURDECODER=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Ex_Decoder_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:2CHDECODER=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_2chan_Decoder_Mode = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:HDMIOUT=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Curr_HDMI_Out_Config = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:HDMIPROCESSING=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_HDMI_Proc_State = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:HDMIASPECT=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_HDMI_Aspect = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:HDMIRESOL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_HDMI_Res = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:ZONENAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Zone_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE1NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene1_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE2NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE3NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE4NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene4_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE5NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene5_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE6NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene6_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE7NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene7_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE8NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene8_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE9NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene9_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE10NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene10_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE11NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene11_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("MAIN:SCENE12NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Main_Scene12_Name = MID(sTemp,sPos +1,ePos);
		}



// ZONE2 FUNCTIONS

		IF(FIND("ZONE2:SLEEP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Sleep_Timer_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:VOL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Vol_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:ZONENAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:SCENE1NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Scene1_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:SCENE2NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Scene2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:SCENE3NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Scene3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE2:SCENE4NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone2_Scene4_Name = MID(sTemp,sPos +1,ePos);
		}

// ZONE3 FUNCTIONS

		IF(FIND("ZONE3:SLEEP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Sleep_Timer_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:VOL=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Vol_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:ZONENAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:SCENE1NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Scene1_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:SCENE2NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Scene2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:SCENE3NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Scene3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE3:SCENE4NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Scene4_Name = MID(sTemp,sPos +1,ePos);
		}


// ZONE4 FUNCTIONS

		IF(FIND("ZONE4:SLEEP=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone3_Sleep_Timer_Text = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:ZONENAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:SCENE1NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Scene1_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:SCENE2NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Scene2_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:SCENE3NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Scene3_Name = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("ZONE4:SCENE4NAME=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Zone4_Scene4_Name = MID(sTemp,sPos +1,ePos);
		}

//TUNER STUFF

		IF(FIND("HDRADIO:FMFREQ=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Station = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:PRGNUM=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Program_Number = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:PRGTYPE=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Program_Type = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:SONG=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Song = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:ARTIST=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Artist = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:ALBUM=",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Curr_Album = MID(sTemp,sPos +1,ePos);
		}

		IF(FIND("HDRADIO:AVAILPRG1=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program1_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG2=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program2_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG3=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program3_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG4=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program4_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG5=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program5_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG6=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program6_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG7=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program7_Avail = True;
		}

		IF(FIND("HDRADIO:AVAILPRG8=Available",sTemp))
		{
			sPos = FIND("=",sTemp);
			ePos = LEN(sTemp);
			Tuner_Program8_Avail = True;
		}


 
	}

	CLEARBUFFER(ClientSocket.SocketRxBuf);	
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/

